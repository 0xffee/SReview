
our $config;

$config->{dbistring} = "dbi:Pg:dbname=sreview";

# Example script definitions for using gridengine

# The maximum number of jobs that the job dispatcher will query in one
# go. Set to a negative value to indicate no limit.
$config->{query_limit} = -1;
# This job should look for new files in the input directory, and add
# them to the database.
$config->{detect_files} = sub { return "qsub -cwd -V -l input ./detect_files"; };
# The job which transforms the raw input data into a raw work file that
# the high-quality jobs transcode to. This should preferably use a
# "copy" operation for the video and audio codecs, if at all possible.
$config->{cut_film} = sub { my ($talkid) = @_; return "qsub -cwd -V -l input -l output ./cut_film $talkid"; };
# This job should transcode the output of the above into all other video
# formats.
$config->{transcode} = sub { my ($talkid) = @_; return "qsub -cwd -V -l output ./transcode $talkid"; };
# This should generate a low-quality preview version of the cut talk
$config->{preview} = sub { my ($talkid) = @_; return "qsub -cwd -V -l output ./previews $talkid";};
# This job should do whatever is necessary to release the given video
# onto the given URL.
$config->{upload} = sub { my ($talkid) = @_; return "qsub -cwd -V -l output -l upload ./upload $input $url"; };

# Script definitions for running things directly (disabled by default)

## We limit the job dispatcher to running one job at a time, so that
## multiple hosts may perform work
# $config->{query_limit} = 1
## We just run everything else directly, without any qsub stuff
# $config->{detect_files} = sub { return "detect_files"; };
# $config->{cut_film} = sub { my ($inputs, $output) = shift; return "cut_film $inputs $output"; };
# $config->{transcode} = sub { my ($input, $output, $type) = shift; return "dv2$type $input $output"; };
# $config->{upload} = sub { my ($input, $url) = shift; return "upload $input $url"; };

# Definitions for things that don't depend on how jobs are ran.

# Where new, raw, recorded files will appear. Sreview expects a
# subdirectory structure of "<room>/<date>/<time>.<inputext>" under this
# location, where <date> and <time> should be in a format that
# PostgreSQL supports for "timestamptz" fields in the current locale.
$config->{inputdir} = "/srv/sreview/input";
# What extension the input files have
$config->{inputext} = ".mp4";
# Where temporary (job-internal) files should be saved. This can safely be a
# local per-node scratch directory.
$config->{workdir} = "/tmp/";
# Where the output files should be stored. It gets the following parameters:
# - event name
# - room name
# - day
# Note that these are not sanity-checked. You may want to do so yourself.
$config->{outputdir} = sub($$$) {my ($event, $room, $day) = @_; $event =~ s/\W/_/g; $room =~ s/\W/_/g; return "/srv/sreview/output/$event/$room/$day"};

1;
