
our $config;

$config->{dbistring} = "dbi:Pg:dbname=sreview";

# Where the gridengine stdout/stderr files should be stored
my $output_dir = "/srv/sreview/gridengine-io";

my $state = {};

# Example script definitions for using gridengine

# The maximum number of jobs that the job dispatcher will query in one
# go. Set to a negative value to indicate no limit.
$config->{query_limit} = -1;


# The job which transforms the raw input data into a raw work file that
# the high-quality jobs transcode to. This should preferably use a
# "copy" operation for the video and audio codecs, if at all possible.
$state->{files_found} = sub { my ($talkid, $room, $length) = @_; return "qsub -cwd -V -l input -l output -b y -pe smp 2 -N cut_talk_$talkid -o $output_dir -e $output_dir /usr/bin/perl cut_talk $talkid"; };
# This should generate a low-quality preview version of the cut talk
$state->{cut_ready} = sub { my ($talkid, $room, $length) = @_; return "qsub -cwd -V -l output -b y -N previews_$talkid -o $output_dir -e $output_dir /usr/bin/perl previews $talkid";};
# This job should transcode the output of the above into all other video
# formats.
$state->{review_done} = sub { my ($talkid, $room, $length) = @_; return "qsub -cwd -V -l output -b y -N transcode_$talkid -o $output_dir -e $output_dir /usr/bin/perl transcode $talkid"; };
# This job should do whatever is necessary to release the given video
# onto the given URL.
$state->{waiting} = sub { my ($talkid, $room, $length) = @_; return "qsub -cwd -V -l output -l upload -b y -N upload_$talkid -o $output_dir -e $output_dir /usr/bin/perl upload $talkid"; };

# Script definitions for running things directly (disabled by default)

## We limit the job dispatcher to running one job at a time, so that
## multiple hosts may perform work
# $config->{query_limit} = 1
## We just run everything else directly, without any qsub stuff
# $state->{files_found} = sub { my $talkid = shift; return "./cut_talk $talkid"; };
# $state->{cut_ready} = sub { my $talkid = shift; return "./previews $talkid"; };
# $state->{transcode} = sub { my $talkid = shift; return "./transcode $talkid"; };
# $state->{upload} = sub { my $talkid = shift; return "./upload $talkid"; };

$config->{state} = $state;

# Definitions for things that don't depend on how jobs are ran.

# Where new, raw, recorded files will appear. Sreview expects a
# subdirectory structure of "<room>/<date>/<time>.<inputext>" under this
# location, where <date> and <time> should be in a format that
# PostgreSQL supports for "timestamptz" fields in the current locale.
$config->{inputglob} = "/var/www/dump/*/*.flv.mp4";
# Subroutine that parses a filename into a room, starting day, starting hour,
# and URL
$config->{parse_raw} = sub($) {
	my $file = shift;
	my $hostname = "streambackendX.video.fosdem.org";
	return undef unless $file =~ /.*\/(([ \/]*)(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2}).flv.mp4)/;
	return ($2, "$3-$4-$5", "$6:$7:$8", "http://$hostname/$1");
};
# Where temporary (job-internal) files should be saved. This can safely be a
# local per-node scratch directory.
$config->{workdir} = "/tmp/";
# Where the webapp "public" directory is found
$config->{pubdir} = "/srv/sreview/web/public";
# Where the output files should be stored. It gets the following parameters:
# - event name
# - room name
# - day
# Note that these are not sanity-checked. You may want to do so yourself.
$config->{outputdir} = sub($$$) {my ($event, $room, $day) = @_; $event =~ s/\W/_/g; $room =~ s/\W/_/g; return "/srv/sreview/output/$event/$room/$day"};

1;
