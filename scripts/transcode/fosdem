#!/usr/bin/perl -w

# Sreview, a web-based video review and transcoding system
# Copyright (c) 2016-2017, Wouter Verhelst <w@uter.be>
#
# Sreview is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use DBI;
use File::Path qw/make_path/;
use File::Temp qw/tempdir/;
use Mojo::Util qw/xml_escape/;

our $config;
require "./config.pl";

my $dbh = DBI->connect($config->{dbistring}, '', '') or die "Cannot connect to database!";

$dbh->begin_work;

my $talkid = $ARGV[0];

my $talk = $dbh->prepare("SELECT * FROM talks WHERE id = ?");

$talk->execute($talkid);

my $row = $talk->fetchrow_hashref();
my $slug = $row->{slug};

my $data = $dbh->prepare("SELECT eventid, event, room, starttime::date AS startdate, slug, speakers, name FROM talk_list WHERE id = ?");
$data->execute($talkid);
my $drow = $data->fetchrow_hashref();
my $pubdir = $config->{pubdir};
my $eid = $drow->{eventid};
make_path("$pubdir/video/$eid");
my $outputsub = $config->{outputdir};
my $outputdir = &$outputsub($drow->{event}, $drow->{room}, $drow->{startdate});
make_path($outputdir);
my $tmpdir = tempdir( "transXXXXXX", DIR => $config->{workdir}, CLEANUP => 1);

sub process_template($$) {
	my $input = shift;
	my $output = shift;
	my $outputsvg = "$tmpdir/tmp.svg";
	my $speakers = xml_escape($drow->{speakers});
	my $room = xml_escape($drow->{room});
	my $title = xml_escape($drow->{name});
	my $startdate = xml_escape($drow->{startdate});

	open INPUT, "<$input";
	open OUTPUT, ">$outputsvg";
	while(<INPUT>) {
		s/\@SPEAKERS@/$speakers/g;
		s/\@ROOM@/$room/g;
		s/\@TITLE@/$title/g;
		s/\@STARTTIME@/$startdate/g;
		print OUTPUT $_;
	}
	close INPUT;
	close OUTPUT;
	system("inkscape --export-png=$output $outputsvg");
}

my $preroll = $config->{pubdir} . "/$eid/$slug-pre.png";
if ( ! -f $preroll ) {
	process_template($config->{preroll_template}, $preroll);
}

my $postroll = $config->{pubdir} . "/$eid/$slug-post.png";
if ( ! -f $postroll ) {
	if(exists($config->{postroll_template})) {
		process_template($config->{postroll_template}, $postroll);
	} elsif(exists($config->{postroll})) {
		$postroll = $config->{postroll};
	} else {
		die "need postroll or postroll template!";
	}
}

# concatenate preroll, main video, postroll
my $workdir = $config->{pubdir} . "/$eid";
system("ffmpeg -y -loop 1 -i $preroll -c:v libx264 -pix_fmt yuv420p -framerate 25 -frames:v 125 $tmpdir/$slug-preroll.ts");
system("ffmpeg -y -i $workdir/$slug.mp4 -c copy -bsf:v h264_mp4toannexb -y $tmpdir/$slug.ts");
system("ffmpeg -y -loop 1 -i $postroll -c:v libx264 -pix_fmt yuv420p -framerate 25 -frames:v 125 $tmpdir/$slug-postroll.ts");
system("ffmpeg -y -i \"concat:$tmpdir/$slug-preroll.ts|$tmpdir/$slug.ts|$tmpdir/$slug-postroll.ts\" -c copy -bsf:a aac_adtstoasc $outputdir/$slug.mp4");
system("ffmpeg -y -i $outputdir/$slug.mp4 -pass 1 -passlogfile $tmpdir/passlog-vp8 -c:v libvpx -c:a libvorbis $outputdir/$slug.vp8.webm");
system("ffmpeg -y -i $outputdir/$slug.mp4 -pass 2 -passlogfile $tmpdir/passlog-vp8 -c:v libvpx -c:a libvorbis $outputdir/$slug.vp8.webm");

my $update = $dbh->prepare("UPDATE talks SET state = state_next(state) WHERE id = ? AND state = 'generating_data'");
$update->execute($talkid);
$dbh->commit;
