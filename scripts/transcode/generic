#!/usr/bin/perl -w

# Sreview, a web-based video review and transcoding system
# Copyright (c) 2016-2017, Wouter Verhelst <w@uter.be>
#
# Sreview is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use utf8;
use DBI;
use File::Path qw/make_path/;
use File::Temp qw/tempdir/;
use SReview::Video;
use SReview::Video::PNGGen;
use SReview::Video::Concat;
use SReview::Videopipe;
use Mojo::Util qw/xml_escape/;

our $config;
require "./config.pl";

my $dbh = DBI->connect($config->{dbistring}, '', '') or die "Cannot connect to database!";

$dbh->begin_work;

my $talkid = $ARGV[0];

my $talk = $dbh->prepare("SELECT * FROM talks WHERE id = ?");

$talk->execute($talkid);

my $row = $talk->fetchrow_hashref();
my $slug = $row->{slug};

my $data = $dbh->prepare("SELECT eventid, event, room, starttime::date AS startdate, slug, speakers, name, subtitle, apologynote FROM talk_list WHERE id = ?");
$data->execute($talkid);
my $drow = $data->fetchrow_hashref();
my $eid = $drow->{eventid};
my $pubdir = $config->{pubdir} . "/" . $eid . "/" . substr($drow->{room}, 0, 1);
my $outputsub = $config->{outputdir};
my $outputdir = &$outputsub($drow->{event}, $drow->{room}, $drow->{startdate});
make_path($outputdir);
my $tmpdir = tempdir( "transXXXXXX", DIR => $config->{workdir}, CLEANUP => 1);

sub process_template($$) {
	my $input = shift;
	my $output = shift;
	my $outputsvg = "$tmpdir/tmp.svg";
	my $speakers = xml_escape($drow->{speakers});
	my $room = xml_escape($drow->{room});
	my $title = xml_escape($drow->{name});
	my $subtitle = xml_escape($drow->{subtitle});
	my $startdate = xml_escape($drow->{startdate});
	my $apology = xml_escape($drow->{apologynote});

	open INPUT, "<$input";
	open my $fh, ">:encoding(UTF-8)", $outputsvg;
	$room =~ s/ \(backup\)//;
	print "creating $output from $input\n";
	while(<INPUT>) {
		s/\@SPEAKERS@/$speakers/g;
		s/\@ROOM@/$room/g;
		s/\@TITLE@/$title/g;
		s/\@SUBTITLE@/$subtitle/g;
		s/\@STARTTIME@/$startdate/g;
		s/\@APOLOGY@/$apology/g;
		print $fh $_;
	}
	close INPUT;
	close $fh;
	system("inkscape --export-png=$output $outputsvg");
}

my $preroll = $pubdir . "/$slug-pre.png";
if ( ! -f $preroll ) {
	process_template($config->{preroll_template}, $preroll);
} else {
	print "reusing $preroll\n";
}

my $postroll = $pubdir . "/$slug-post.png";
if ( ! -f $postroll ) {
	if(exists($config->{postroll_template})) {
		process_template($config->{postroll_template}, $postroll);
	} elsif(exists($config->{postroll})) {
		print "using $postroll from config\n";
		$postroll = $config->{postroll};
	} else {
		die "need postroll or postroll template!";
	}
} else {
	print "reusing $postroll\n";
}

my $main_input = SReview::Video->new(url => "$pubdir/$slug.ts");

my $apology = $pubdir . "/$slug-sorry.png";
my $sorry;
if(defined($drow->{apologynote}) && length($drow->{apologynote}) > 0) {
	die unless exists($config->{apology_template});
	process_template($config->{apology_template}, $apology);
	$sorry = SReview::Video->new(url => "$tmpdir/$slug-sorry.ts", reference => $main_input);
	SReview::Videopipe->new(inputs => [SReview::Video::PNGGen->new(url => $apology)], output => $sorry)->run();
	#system("ffmpeg -y -loop 1 -i $apology -c:v libx264 -pix_fmt yuv420p -framerate 25 -frames:v 125 $tmpdir/$slug-sorry.ts");
}

# concatenate preroll, main video, postroll
my $pre = SReview::Video->new(url => "$tmpdir/$slug-preroll.ts", reference => $main_input, duration => 5);
SReview::Videopipe->new(inputs => [SReview::Video::PNGGen->new(url => $preroll)], output => $pre, vcopy => 0, acopy => 0)->run();
my $main = SReview::Video->new(url => "$tmpdir/$slug.ts");
SReview::Videopipe->new(inputs => [$main_input], output => $main)->run();
my $post = SReview::Video->new(url => "$tmpdir/$slug-postroll.ts", reference => $main_input, duration => 5);
SReview::Videopipe->new(inputs => [SReview::Video::PNGGen->new(url => $postroll, duration => 5)], output => $post, vcopy => 0, acopy => 0)->run();
my $inputs = [ $pre ];
if( -f "$tmpdir/$slug-sorry.ts") {
	push @$inputs, $sorry;
}
push @$inputs, ( $main, $post );
#	system("ffmpeg -y -i \"concat:$tmpdir/$slug-preroll.ts|$tmpdir/$slug-sorry.ts|$tmpdir/$slug.ts|$tmpdir/$slug-postroll.ts\" -c copy -bsf:a aac_adstoasc $outputdir/$slug.mp4");
#} else {
#	system("ffmpeg -y -i \"concat:$tmpdir/$slug-preroll.ts|$tmpdir/$slug.ts|$tmpdir/$slug-postroll.ts\" -c copy -bsf:a aac_adtstoasc $outputdir/$slug.mp4");
#}
my $input = SReview::Video::Concat->new(components => $inputs, url => "$tmpdir/concat.txt");
my $pipe = SReview::Videopipe->new(inputs => [$input], output => SReview::Video->new(url => "$outputdir/$slug.webm"), vcopy => 0, acopy => 0, multipass => 1)->run();
#system("ffmpeg -y -i $outputdir/$slug.mp4 -pass 1 -passlogfile $tmpdir/passlog-vp8 -c:v libvpx -c:a libvorbis $outputdir/$slug.vp8.webm");
#system("ffmpeg -y -i $outputdir/$slug.mp4 -pass 2 -passlogfile $tmpdir/passlog-vp8 -c:v libvpx -c:a libvorbis $outputdir/$slug.vp8.webm");

my $update = $dbh->prepare("UPDATE talks SET state = state_next(state) WHERE id = ? AND state = 'generating_data'");
$update->execute($talkid);
$dbh->commit;
