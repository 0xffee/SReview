#!/usr/bin/perl -w

# Sreview, a web-based video review and transcoding system
# Copyright (c) 2016-2017, Wouter Verhelst <w@uter.be>
#
# Sreview is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use DBI;
use Sys::Syslog qw/:standard :macros/;

openlog("SReview-dispatch", "pid", LOG_DAEMON);

our $config;
require './config.pl';

my $dbh = DBI->connect($config->{dbistring}, '', '') or die "Cannot connect to database!";

while(1) {
	$dbh->begin_work;
	syslog(LOG_DEBUG, "==> Checking for new work...\n");
	my $next = $dbh->prepare("UPDATE talks SET state = state_next(state), progress='waiting' WHERE id = ?");
	my $start = $dbh->prepare("UPDATE talks SET progress = 'scheduled' WHERE id = ?");

	my $st;
	my $statelist = "'" . join("','", keys(%{$config->{state}})) . "'";
	if($config->{query_limit} > 0) {
		$st = $dbh->prepare("SELECT talks.id, state, progress, title, rooms.name AS room, extract(epoch from (endtime - starttime)) AS length FROM talks JOIN rooms ON rooms.id = talks.room WHERE (state IN ($statelist) AND progress = 'waiting') OR progress = 'done' LIMIT ? FOR UPDATE");
		$st->execute($config->{query_limit});
	} else {
		$st = $dbh->prepare("SELECT talks.id, state, progress, title, rooms.name AS room, extract(epoch from (endtime - starttime)) AS length FROM talks JOIN rooms ON rooms.id = talks.room WHERE (state IN ($statelist) AND progress = 'waiting') OR progress = 'done' FOR UPDATE");
		$st->execute;
	}
	while(my $row = $st->fetchrow_hashref) {
		if($row->{progress} eq "done") {
			$next->execute($row->{id});
			next;
		}
		if(exists($config->{state}{$row->{state}})) {
			syslog(LOG_NOTICE, "Starting job for event " . $row->{title} . " in state " . $row->{state} . "...\n");
			$start->execute($row->{id});
			my $statetranssub = $config->{state}{$row->{state}};
			system &$statetranssub($row->{id}, $row->{room}, $row->{length});
		}
	}
	syslog(LOG_DEBUG, "finished, waiting 30 seconds...\n");
	$dbh->commit;

	sleep 30;
}
