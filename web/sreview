#!/usr/bin/perl -w

use strict;
use warnings;

use Mojolicious::Lite;
use Mojo::Collection 'c';
use DBI;

use experimental "switch";

our $config;
require './config.pl';

die if $config->{secrets}[0] eq "_INSECURE_DEFAULT_REPLACE_ME_";

my $dbh = DBI->connect($config->{dbistring}, '', '', {AutoCommit => 1}) or die "Cannot connect to database!";

sub find_event {
	my $st = $dbh->prepare("SELECT id FROM events WHERE name = ?");
	$st->execute($config->{event}) or die "Could not find event!\n";
	while(my $row = $st->fetchrow_hashref("NAME_lc")) {
		die if exists($config->{eventid});
		$config->{eventid} = $row->{id};
	}
}

find_event;

app->secrets($config->{secrets});

helper dbh => sub { return $dbh; };

my $version;

sub get_version {
	open GIT, "git describe --tags --dirty|";
	$version = <GIT>;
	chomp $version;
	close GIT;
}

get_version;

helper talk_update => sub {
	my $c = shift;
	my $talk = shift;
	my $choice = $c->param('choice');
	if($choice eq 'reset') {
		my $sth = $c->dbh->prepare("UPDATE talks SET state='preview' WHERE id = ?");
		$sth->execute($talk) or die;
	} elsif($choice eq 'ok') {
		my $sth = $c->dbh->prepare("UPDATE talks SET state='review_done' WHERE id = ?");
		$sth->execute($talk) or die;
	} elsif($choice eq 'standard') {
		my $sth = $c->dbh->prepare("SELECT id, name FROM properties");
		$sth->execute();
		while(my $row = $sth->fetchrow_hashref("NAME_lc")) {
			my $name = $row->{name};
			my $parm = $c->param("correction_${name}");
			next unless defined($parm);
			next if (length($parm) == 0);
			my $s = $c->dbh->prepare("INSERT INTO corrections(property_value, talk, property) VALUES(?, ?, (SELECT id FROM properties WHERE name = ?))");
			$s->execute($parm, $talk, $name) or die;
		}
	} elsif($choice eq 'comments') {
		my $sth = $c->dbh->prepare("UPDATE talks SET state='broken', comments = ? WHERE id = ?");
		my $comments = $c->param("comment_text");
		$sth->execute($comments, $talk) or die;
	} else {
		$c->stash(message => "Unknown action.");
		$c->render("error");
		return undef;
	}
	$c->stash(message => 'Update successful.');
};


helper version => sub { return $version; };

get '/' => sub {
	my $c = shift;
	$c->render;
} => 'index';

get '/login';

post '/login_post' => sub {
	my $c = shift;

	my $email = $c->param('email');
	my $pass = $c->param('pass');

	my $st = $c->dbh->prepare("SELECT id FROM users WHERE email=? AND password=crypt(?, password)");
	my $rv;
	if(!($rv = $st->execute($email, $pass))) {
		die "Could not check password: " . $st->errstr;
	}
	if($rv == 0) {
		$c->stash(message => "Incorrect username or password.");
		$c->render('error');
		return undef;
	}
	my $row = $st->fetchrow_arrayref or die "eep?! username query returned nothing\n";
	$c->session->{id} = $row->[0];
	$c->session->{email} = $email;

	return $c->redirect_to('/admin');
};

get '/review/:nonce' => sub {
	my $c = shift;
	my $stt = $c->dbh->prepare("SELECT * FROM talk_list WHERE nonce=?");
	my $rv = $stt->execute($c->param("nonce"));
	if($rv == 0) {
		$c->res->code(404);
		$c->render(text => "Invalid URL");
		return undef;
	}
	my $row = $stt->fetchrow_hashref("NAME_lc");
	if($row->{state} ne 'preview' && $row->{state} ne 'broken') {
		$c->stash(message => "The talk <q>" . $row->{name} . "</q> is not currently available for review. It is in the state <tt>" . $row->{state} . "</tt>, whereas we need the <tt>preview</tt> state to do review. For more information, please see <a href=''>the documentation</a>");
		$c->stash(title => 'Review finished or not yet available.');
		$c->render('msg');
		return undef;
	}
	$c->stash(talk_title => $row->{name});
	$c->stash(talk_speakers => $row->{speakers});
	$c->stash(talk_start => $row->{starttime});
	$c->stash(talk_end => $row->{starttime});
	$c->stash(slug => $row->{slug});
	$c->stash(event => $config->{event});
	$c->stash(eventid => $config->{eventid});
	$c->stash(room => $row->{room});
	$c->stash(state => $row->{state});
	my $stp = $c->dbh->prepare("SELECT properties.name, properties.description, corrections.property_value FROM properties left join corrections on properties.id = corrections.property where talk is null or talk = ? ORDER BY properties.description");
	$stp->execute($row->{id});
	$c->stash(corrections => $stp->fetchall_arrayref());
	$c->stash(comments => $row->{comments});
	$c->stash(target => "talk_update");
	$c->stash(layout => 'default');
} => 'talk';

get '/overview' => sub {
	my $c = shift;
	my $st = $c->dbh->prepare('SELECT name, speakers, room, starttime, state FROM talk_list WHERE state IS NOT NULL ORDER BY state, room, starttime');
	my $tot = $c->dbh->prepare('SELECT state, count(*) FROM talks GROUP BY state ORDER BY state;');
	$st->execute or die;
	$tot->execute or die;
	$c->stash(titlerow => [ 'Talk', 'Speakers', 'Room', 'Start time', 'State' ]);
	$c->stash(rows => $st->fetchall_arrayref);
	$c->stash(header => 'Video status overview');
	$c->stash(totals => $tot->fetchall_arrayref());
	$c->stash(layout => 'default');
	$c->render;
} => 'table';

post '/talk_update' => sub {
	my $c = shift;
	my $nonce = $c->param("nonce");
	if(!defined($nonce)) {
		$c->stash(message=>"Unauthorized.");
		$c->res->code(403);
		$c->render('error');
		return undef;
	}
	my $sth = $c->dbh->prepare("SELECT id FROM talks WHERE nonce = ?");
	$sth->execute($nonce);
	my $row = $sth->fetchrow_arrayref;
	if(scalar($row) == 0) {
		$c->stash(message=>"Unauthorized.");
		$c->res->code(403);
		$c->render('error');
		return undef;
	}
	$c->stash(layout => 'default');
	$c->stash(template => 'talk');
	$c->talk_update($row->[0]);
	$c->redirect_to("/review/$nonce");
} => 'talk_update';

### ADMINISTRATION ###

under '/admin' => sub {
	my $c = shift;
	if(!exists($c->session->{id})) {
		$c->res->code(403);
		$c->render(text => 'Unauthorized');
		return 0;
	}
	$c->stash(layout => "admin");
	return 1;
};

get '/' => sub {
	my $c = shift;
	my $st = $c->dbh->prepare('SELECT id, room, name, starttime, speakers, state FROM talk_list  WHERE event = ? ORDER BY room, starttime');
	my $talks = ();
	my $room;
	my $lastroom = '';
	$st->execute($config->{eventid});
	while(my $row = $st->fetchrow_hashref("NAME_lc")) {
		if ($row->{'room'} ne $lastroom) {
			if(defined($room)) {
				push @$talks, c($lastroom => $room);
			}
			$room = [];
		}
		$lastroom = $row->{'room'};
		next unless defined($row->{id});
		push @$room, [$row->{'starttime'} . ': ' . $row->{'name'} . ' by ' . $row->{'speakers'} . ' (' . $row->{'state'} . ')' => $row->{'id'}];
	}
	if(defined($room)) {
		push @$talks, c($lastroom => $room);
	}
	$c->stash(email => $c->session->{email});
	$c->stash(talks => $talks);
	$c->render;
} => 'admin/main';

get '/logout' => sub {
	my $c = shift;
	delete $c->session->{id};
	$c->redirect_to('/');
};

get '/talk' => sub {
	my $c = shift;
	my $id = $c->param("talk");

	my $st = $c->dbh->prepare('SELECT * FROM talk_list WHERE id = ?');
	$st->execute($id);
	my $row = $st->fetchrow_hashref("NAME_lc");
	my $stp = $c->dbh->prepare("SELECT properties.name, properties.description, corrections.property_value FROM properties left join corrections on properties.id = corrections.property where talk is null or talk = ? ORDER BY properties.description");
	$stp->execute($id);

	if(!defined($row)) {
		$c->stash(message => "Unknown talk.");
		$c->render('error');
		return undef;
	}

	$c->stash(talk_title => $row->{name});
	$c->stash(talk_speakers => $row->{speakers});
	$c->stash(talk_start => $row->{starttime});
	$c->stash(talk_end => $row->{starttime});
	$c->stash(slug => $row->{slug});
	$c->stash(event => $config->{event});
	$c->stash(eventid => $config->{eventid});
	$c->stash(room => $row->{room});
	$c->stash(state => $row->{state});
	$c->stash(comments => $row->{comments});
	$c->stash(corrections => $stp->fetchall_arrayref);
	$c->stash(target => "talk_update_admin");
	$c->render(template => 'talk');
} => 'admin_talk';

post '/talk_update' => sub {
	my $c = shift;
	my $talk = $c->param("talk");
	if(!defined($talk)) {
		$c->stash(message => "Required parameter talk missing.");
		$c->render("error");
		return undef;
	}
	$c->stash(template => 'talk');
	$c->talk_update($talk);
	$c->redirect_to("/admin/talk?talk=$talk");
} => 'talk_update_admin';

get '*any' => sub {
	my $c = shift;
	$c->redirect_to('/admin');
};

app->start;
